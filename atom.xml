<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Samnan ur Rehman]]></title>
  <link href="http://Samnan.github.com/atom.xml" rel="self"/>
  <link href="http://Samnan.github.com/"/>
  <updated>2013-03-25T18:06:07+05:00</updated>
  <id>http://Samnan.github.com/</id>
  <author>
    <name><![CDATA[Samnan ur Rehman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Imploding a simple PHP array. Are you upto the challenge?]]></title>
    <link href="http://Samnan.github.com/blog/2013/03/25/imploding-a-simple-php-array-are-you-upto-the-challenge/"/>
    <updated>2013-03-25T17:00:00+05:00</updated>
    <id>http://Samnan.github.com/blog/2013/03/25/imploding-a-simple-php-array-are-you-upto-the-challenge</id>
    <content type="html"><![CDATA[<p>I have been developing applications with PHP for more than 10 years, and every now and then something comes up that looks to be fairly trivial task as first, yet it takes up a considerable amount of time to actually get done because of some of the PHP quirks (or features as you may call it). Here is one of my recent encounter with a piece of code, that I would like you to try out and see how fast you can achieve the desired results.</p>

<!--more-->


<h2>The Problem</h2>

<p>You have an array of few data values, and your task is to generate a string that represents the concatenated values of the array as output. Simple isn&#8217;t it, let&#8217;s check the code and find out.</p>

<h2>The Code</h2>

<pre><code>    &lt;?php
        $data = array(
            'name' =&gt; "James",
            'id' =&gt; 746820,
            'amount' =&gt; 10.00,
            'status' =&gt; 'valid'
        );

    // write code here that will output the array values concatenated into a single string
    // $output = .....
    // echo $output;

    // the resulting output on screen should be as below (without starting comments of course)
    // James74682010.00valid

    ?&gt;
</code></pre>

<p>Notes:</p>

<ul>
<li>The array keys are known (there maybe more, but the idea is to keep the code simple here)</li>
<li>The array data types are known, but the values are not, e.g. the key &#8216;amount&#8217; may contain either of the following values:
  2.5, 10.00, 100.50, 1.250, 1.245 etc</li>
<li>Your solution should use the $data array to generate the output in some way. You are allowed to modify the $data array as you like.</li>
</ul>


<h2>The Result</h2>

<p>Here is a quick piece of code to get you started:</p>

<pre><code>    $output = implode('', $data);
    echo $output;
</code></pre>

<p>However, you will (not) be disappointed to see that the output is not exactly what is desired. I will leave you to figure out why PHP is doing it, and you can try finding a solution to see how good you are at PHP, depending on the amount of time you take to solve this. I will keep my solution style &#8220;display:none&#8221; to feed your curiosity :)</p>

<p>Feel free to post your solution as comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The definitive guide to compiling PHP 5 on Windows]]></title>
    <link href="http://Samnan.github.com/blog/2012/09/21/the-definitive-guide-to-compiling-php-5-on-windows/"/>
    <updated>2012-09-21T11:03:00+05:00</updated>
    <id>http://Samnan.github.com/blog/2012/09/21/the-definitive-guide-to-compiling-php-5-on-windows</id>
    <content type="html"><![CDATA[<p>Compiling PHP 5 on a Windows platform is a messy business. There are lot of pitfalls and annoying problems that make it difficult to compile PHP itself, or a PHP extension on Windows. After recently going through the pain, I decided to create a step by step guide so that it might be useful to other people out there.
Using this guide, the latest version of PHP 5(currently 5.4.7) and related extensions can be compiled on Windows 32bit and 64bit platforms (Windows XP, Vista, 7).</p>

<!--more-->


<h2>Pre-requisite</h2>

<p>This article assumes you have basic knowledge of using the Windows command line as we will be doing most of the work on the command line, which is the easier way to compile PHP on windows. Other than that most of the tools/applications mentioned in the article are easily downloadable and all are free, with links provided wherever necessary. You will also need some archiving tool that can extract zip, gz and 7z files.</p>

<h2>Setting up the environment</h2>

<p>Follow the steps exactly as they are described below:</p>

<ul>
<li><p>Install Microsoft Windows SDK 6.1</p></li>
<li><p>Install Microsoft Visual Studio 2008 (Express/Ultimate/Super, all versions work, but VS2010 will not work)</p></li>
<li><p>Create a folder somewhere on your disk with enough space available for the source, tools and output files (for this article we will use C:\php, you should replace it with the path where you create your own folder)</p></li>
<li><p>Download latest version of PHP binary tools from <a href="php.net">http://windows.php.net/downloads/php-sdk/</a>, extract into C:\php\ directly, so that the c:\php folder contains the bin, script and share folders from binary tools.</p></li>
<li><p>Download latest PHP 5 32bit source code from <a href="php.net">http://windows.php.net/download/</a>. You will most probably want the thread safe version, but you can also try non-thread safe if that is your requirement.</p></li>
<li><p>Create the folder structure inside C:\php so that it look like below (if required):</p>

<pre><code>  C:\php
  |__ bin
  |__ script
  |__ share
  |__ php54dev
      |___vc9
          |___x86
</code></pre></li>
<li><p>Now extract the PHP source code in the x86 folder, so that the complete path of the source code looks like this:</p>

<pre><code>  C:\php\php54dev\vc9\x86\php-5.4.7-src
</code></pre></li>
<li><p>Download the dependency headers and libraries package from <a href="php.net">http://windows.php.net/downloads/php-sdk/</a>, usually called &#8220;deps-5.4-vc9-x86.7z&#8221;. Extract it inside the folder C:\php\php54dev\vc9\x86\deps folder, so that the &#8216;deps&#8217; folder contains bin, include and other folders from the package.</p></li>
</ul>


<p>That&#8217;s all we need to start configuring and compiling php and related extensions.</p>

<h2>Configuring and Compiling PHP</h2>

<p>From start menu, within the Windows SDK 6.1 folder, start the &#8220;CMD Shell&#8221;. It is basically a command prompt with the paths setup properly for using the compiler and related tools. One by one, enter the following commands:
[Note: replace <code>C:\php</code> with the path of your folder in the commands below]</p>

<pre><code>    setenv /xp /x86 /release         # command prompt colors would change as you run this to confirm it worked
    set PATH=C:\php\bin;%PATH%       
    cd c:\php\php54dev\vc9\x86\php-5.4.7-src

    buildconf
</code></pre>

<p>After the last command you will see a message &#8216;Now run configure &#8211;help&#8217;. At this stage you can run the command <code>configure --help</code> to see all available option for PHP compilation. I will describe some of those below which arre most commonly used (each command is preceded by comments on what it does).</p>

<pre><code># compile everything, including all extensions statically into PHP
configure

# compile only PHP, without any extensions
configure --disable-all

# compile php statically with only the 'curl' extension 
configure --disable-all --with-curl

# compile php with only the 'curl' extension as a separate dll
configure --disable-all --with-curl=shared
# another example of the above command
configure --disable-all --with-curl=shared --with-bz2=shared --with-mysql=shared

# compile php with command line
configure --disable-all --enable-cli

# compile everything, but leave the curl extension
configure --without-curl
</code></pre>

<p>After you have run the desired configuration command, all you have to do to finally compile PHP is to run the command:</p>

<pre><code>nmake
</code></pre>

<p>Wait for a few minutes and if the compilation is successful, you should have the php libraries, dll&#8217;s and cli command line (if configured) in the <code>Release_TS</code> folder.</p>

<h3>Compiling individual extensions</h3>

<p>Let&#8217;s assume you want to only recompile the <code>curl</code> extension after you have applied some patch to it in the source code tree. You do not need to rebuild all of build, just run the following command to re-build the <code>php_curl.dll</code> extension again:</p>

<pre><code>nmake php_curl.dll
</code></pre>

<p>If however, you want to compile it to PHP statically, then you will have to run <code>nmake</code> since all of the PHP needs to be linked again, though it will take much less time than first compilation since only the changed files are compiled and linked again.</p>

<h3>Creating / compiling your extension</h3>

<p>Creating a PHP extension from scratch requires another tutorial, and there are plenty of resources available online that show you how to do that, but just in case you want your extension to be part of the build whenever you run <code>nmake</code>, then you need to follow just one extra step.</p>

<p>Create a folder called &#8216;pecl&#8217; at the following location:</p>

<p><code>c:\php\php54dev\vc9\x86\</code></p>

<p>Asusming your extension is called <code>myext</code>, then copy the <code>myext</code> folder inside the pecl folder, so that the folder structure looks like this:</p>

<p><code>c:\php\php54dev\vc9\x86\pecl\myext</code></p>

<p>Now you have to reconfigure PHP so that it finds your new extension:</p>

<pre><code>buildconf
configure --enable-myext
# alternatively, to build the extension as a dll, use the command below
configure --enable-myext=shared

nmake php_myext.dll
</code></pre>

<p>That&#8217;s it! That is everything you need to know to configure and compile PHP on your Windows platform.</p>

<h4>Compiling 64bit version of PHP</h4>

<p>While the compilation process of 64bit PHP source code is very similar to above, there are only few small things that changed, for example, <code>x86</code> in the above article should be replaced with <code>x64</code>, ans similarly, the folder structure should contain <code>x64</code> instead of <code>x86</code>. Other than that, everything should work fine if you have installed the 64bit versions of the compiler on your machine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 5 things I like about Windows 8 Preview]]></title>
    <link href="http://Samnan.github.com/blog/2012/06/16/top-5-things-i-like-about-windows-8-preview/"/>
    <updated>2012-06-16T19:50:00+05:00</updated>
    <id>http://Samnan.github.com/blog/2012/06/16/top-5-things-i-like-about-windows-8-preview</id>
    <content type="html"><![CDATA[<p>Windows 8 Consumer Preview was recently released by Microsoft, and is available free from their website for everyone. After installing and playing with it for a while, I have found the experience pleasing and satisfying enough to crave for the final version. Here is a list of 5 things I liked best about the preview.</p>

<!--more-->


<h2>Rectangular Windows</h2>

<p>Yes! You read it right. For me, that is the best thing in Windows 8 interface. I have always had to download and install unsigned theme patches just to get rectangular corners on the windows, since the rounded ones used in Windows Vista and 7 never appealed to me. Thankfully, guys at Microsoft have done a fantastic job in making the default theme for Windows 8 to to make the Windows experience smooth.
<img src="http://Samnan.github.com/content/2012/06/win8-windows.png"></p>

<h2>Multi Monitor Taskbar</h2>

<p>Those who own and use more than one display device for Windows, will be ultra pleased with the new taskbar changes in Windows 8.
Unlike the lone taskbar sitting on first desktop, Windows 8 taskbar can now be made to not only span multiple monitors, but you can also choose to display the application icons on either your main display, or shown individually on the taskbar on the display on the monitor where the application is active. This really helps keep the taskbar clean on each monitor, not to mention easily identifying which button to click if you run many apps at the same time on your desktop.
<img src="http://Samnan.github.com/content/2012/06/win8-taskbar.png"></p>

<h2>Hibernated Shutdown</h2>

<p>A feature that I really liked in MAC OSX was that apps that were running at the time of system shutdown, would resume from the same state after a reboot. Windows 8 preview  employs a similar technique and resumes applications (or tries to?) in the same state that they were at the time of shutting down Windows. It remains to be seen whether the feature requires additional work for developers, or will Windows 8 be able to pull out this great feature all by itself on all applications when the final version comes out.</p>

<h2>Poor Man&#8217;s Task Manager</h2>

<p>The Task Manager in Windows 8, inspired by Process Explorer, finally gets a makeover to be actually useful for everyday use. Color coded display eases out the display of task list, and grouping makes system processes, application, services etc. appear separately to be clearly identified and managed.
<img src="http://Samnan.github.com/content/2012/06/win8-taskmgr.png"></p>

<h2>Visual Studio 2012</h2>

<p>Couldn&#8217;t say more about this, but Microsoft Visual Studio is probably the tool of the decade (if there was such a thing out there). Visual Studio 2012 (currently in RC state for Windows 8), allows developing Windows 8 applications, including tons of samples to give you a quick start. This is one tool that you will never get bored of playing with, and it seems the fun is going to be doubled with VS 2012 and Windows 8 when they come out. Also available for download free from the Windows 8 developer center on Microsoft website.
<img src="http://Samnan.github.com/content/2012/06/win8-vs2012.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Propel ORM with Kohana 3]]></title>
    <link href="http://Samnan.github.com/blog/2012/04/27/integrating-propel-orm-with-kohana-3/"/>
    <updated>2012-04-27T23:10:00+05:00</updated>
    <id>http://Samnan.github.com/blog/2012/04/27/integrating-propel-orm-with-kohana-3</id>
    <content type="html"><![CDATA[<p><a href="http://www.propelorm.org/">Propel</a> is a fast ORM with multiple database support and can be integrated with the Kohana 3.x framework instead of it&#8217;s default ORM.
Since Propel generates it&#8217;s models using command line, some work is involved in integrating it with Kohana 3. Therefore, I created a simple module for Kohana 3 with all the required scripts and stuff.</p>

<!--more-->


<ul>
<li>The module described in this article is available for download <a href="https://github.com/Samnan/Kohana-Propel">here</a>. *</li>
</ul>


<h2>Pre-requisite</h2>

<p>While the module neatly integrates into Kohana, you will still require to download Propel sepearately and put it inside the module&#8217;s vendor folder.</p>

<p>Apart from that, you will also need to have a working installation of <a href="http://www.phing.info/trac/">Phing</a>. The best way to do that is install it using PEAR, and then set the paths correctly in the script provided with the module.</p>

<h2>Downloading Propel</h2>

<p>Download Propel 1.6 or above (version 2.0 is in beta at the time of this writing) from <a href="http://www.propelorm.org/">Propel website</a>.</p>

<h2>Using the module</h2>

<p>Before you enalbe the module in your application&#8217;s bootstrap, you will need to generate your database models, otherwise you will get exceptions as the required Propel configuration files will not be available until the schema is generated. From there on, you can simply regenerate your models when required without changing any other configuration.</p>

<h2>Troubleshooting</h2>

<p>If you enable the propel module for the first time, and you have not yet run the propel model and conf generator commands, Kohana will throw an exception. Make sure you run the convert-conf command at least once before you enable the module in your application.</p>

<p>If you encounter errors while running some of the commands above, then you are most likely missing the &#8216;Phing&#8217; command on your system, or you have setup your paths incorrectly in the &#8216;propel.bat&#8217; file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Webpages with Firefox 3D View]]></title>
    <link href="http://Samnan.github.com/blog/2012/04/27/debugging-webpages-with-firefox-3d-view/"/>
    <updated>2012-04-27T19:10:00+05:00</updated>
    <id>http://Samnan.github.com/blog/2012/04/27/debugging-webpages-with-firefox-3d-view</id>
    <content type="html"><![CDATA[<p>The neweset version of Firefox browser has improved web developer tools, and one of the coolest tool is the 3D debugging view of the webpage. This functionality was previously available as as addon, but now has been integrated into the browser web developer tools. To activate the tool, Press Ctrl+Shift+I inside any webpage, and then click the &#8216;3D View&#8217; button at the bottom of the screen.</p>

<!--more-->


<p><img src="http://Samnan.github.com/content/2012/04/ff-3dview.png"></p>

<p>The 3D view, while proving some nice eye candy, can also help find z-index issues and inspect hard to find elements hidden behind other elements on a webpage.</p>
]]></content>
  </entry>
  
</feed>
